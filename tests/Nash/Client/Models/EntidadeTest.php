<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-03 at 13:39:05.
 */
class EntidadeTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Entidade
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    public function testPossoInicializarOsValoresDeUmObjetoComMaisDeDoisNiveisAPartirDeUmArrayNoFormatoDeRequisicao() {
        $array = $this->getFilhaEntidadeTest2ArrayFormatoRequisicao();
        $filha = new FilhaEntidadeTest2($array);
        
        $this->assertEquals(13, $filha->getId());
        $this->assertEquals("Hello", $filha->getSingleValue());
        $this->assertNotNull($filha->getPropriedade());
        $this->assertEquals(11, $filha->getPropriedade()->getId());
        $this->assertEquals("World", $filha->getPropriedade()->getSingleValue());
        $this->assertNotNull($filha->getPropriedade()->getPropriedade());
        $this->assertEquals(17, $filha->getPropriedade()->getPropriedade()->getId());
    }
    
    public function testPossoInicializarOsValoresAPartirDeUmArrayNoFormatoDeRequisicao() {
        $array = $this->getFilhaEntidadeTestArrayFormatoRequisicao();
        $filha = new FilhaEntidadeTest($array);
        
        $this->assertEquals(13, $filha->getId());
        $this->assertEquals("Hello", $filha->getSingleValue());
        $this->assertNotNull($filha->getPropriedade());
        $this->assertEquals(11, $filha->getPropriedade()->getId());
    }

    public function testPossoInicializarOsValoresAPartirDeUmArray() {
        $array = $this->getFilhaEntidadeTestArray();
        $filha = new FilhaEntidadeTest($array);
        
        $this->assertEquals(13, $filha->getId());
        $this->assertEquals("Hello", $filha->getSingleValue());
        $this->assertNotNull($filha->getPropriedade());
        $this->assertEquals(11, $filha->getPropriedade()->getId());
    }
    
    public function testPossoInicializarOsValoresAPartirDeStdClass() {
        $stdClass = $this->getFilhaEntidadeTestStdClass();
        $filha = new FilhaEntidadeTest($stdClass);
        
        $this->assertEquals(13, $filha->getId());
        $this->assertEquals("Hello", $filha->getSingleValue());
        $this->assertNotNull($filha->getPropriedade());
        $this->assertEquals(11, $filha->getPropriedade()->getId());
    }
    
    public function testPossoCarregarUmObjetoComEnum() {
        $array = array("valor" => 1);
        $filha = new FilhaEntidadeTesteEnum($array);
        
        $this->assertEquals(1, $filha->getValor());
    }
    
    public function testPossoCarregarUmObjetoComEnumAPartirDoTitulo() {
        $array = array("valor" => "valor_um");
        $filha = new FilhaEntidadeTesteEnum($array);
        
        $this->assertEquals(1, $filha->getValor());
    }
    
    public function getFilhaEntidadeTestStdClass() {
        $entity = new \stdClass();
        $entity->Id = 13;
        $entity->SingleValue = "Hello";
        $entity->Propriedade = new \stdClass();
        $entity->Propriedade->Id = 11;
        
        return $entity;
    }
    
    public function getFilhaEntidadeTestArray() {
        return array(
            "id" => 13,
            "singleValue" => "Hello",
            "propriedade" => array(
                "id" => 11
            )
        );
    }
    
    public function getFilhaEntidadeTestArrayFormatoRequisicao() {
        return array(
            "id" => 13,
            "singleValue" => "Hello",
            "propriedade.Id" => 11
        );
    }
    
    public function getFilhaEntidadeTest2ArrayFormatoRequisicao() {
        return array(
            "id" => 13,
            "singleValue" => "Hello",
            "propriedade.Id" => 11,
            "propriedade.singleValue" => "World",
            "propriedade.propriedade.id" => 17
        );
    }
}

class FilhaEntidadeTest extends Entidade {
    private $singleValue;
    private $propriedade;
    
    public function getSingleValue() {
        return $this->singleValue;
    }

    public function setSingleValue($singleValue) {
        $this->singleValue = $singleValue;
        return $this;
    }
    
    public function getPropriedade() {
        return $this->propriedade;
    }

    public function setPropriedade(FilhaEntidadeTest $propriedade) {
        $this->propriedade = $propriedade;
        return $this;
    }
}

class FilhaEntidadeTest2 extends FilhaEntidadeTest {
    public function setPropriedade(FilhaEntidadeTest $propriedade) {
        parent::setPropriedade($propriedade);
        return $this;
    }
}

class EnumEntidadeTest extends BaseEnum {
    const VALOR_UM = 1;
    const VALOR_DOIS = 2;
    
    public static function getType() {
        return get_class();
    }
}

class FilhaEntidadeTesteEnum extends Entidade {
    private $valor;
    
    public function getValor() {
        return $this->valor;
    }

    public function setValor($valor) {
        EnumEntidadeTest::check(EnumEntidadeTest::getType(), $valor);
        $this->valor = EnumEntidadeTest::getValue(EnumEntidadeTest::getType(), $valor);;
        return $this;
    }
}