<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-12-30 at 23:47:58.
 */
class ClienteServiceTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var ClienteService
     */
    protected $object;
    protected $session;
    protected static $cliente = null;
    protected static $config;
    
    public static function setUpBeforeClass()
    {
        self::$config = require("config.php");
        self::$config = self::$config[self::$config["running"]];
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->session = new NashEarlySession(self::$config["authenticationPath"], self::$config['servicePath']);
        $this->session->login(self::$config);
        $this->object = new ClienteService($this->session);
        
        $empresaService = new EmpresaService($this->session);
        $empresa = $empresaService->getEmpresasSelecionaveis(1, 0)[0];
        $empresaService->selecionaEmpresa($empresa->getId());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->session->logout();
    }
    
    public static function tearDownAfterClass()
    {
        $cliente = self::$cliente;
        if (!is_null($cliente)) {
            $session = new NashEarlySession(self::$config["authenticationPath"], self::$config['servicePath']);
            $session->logout();
            $session->login(self::$config);
            $service = new ClienteService($session);
            $result = $service->read($cliente->getId());
            if ($result->getStatus() == Result::SUCCESS) {
                $service->delete($result->getModel()->getId());
            }
            $session->logout();
        }
        self::$cliente = null;
    }

    /**
     * @covers Nash\Client\Services\ClienteService::create
     */
    public function testCreate()
    {
        $cliente = $this->getCliente();
        $result = $this->object->create($cliente);
        
        $this->assertEquals(Result::SUCCESS, $result->getStatus());
        $this->assertNotNull($result->getModel());
        $this->assertGreaterThan(0, $result->getModel()->Id);
        
        return $result->getModel();
    }

    /**
     * @covers Nash\Client\Services\ClienteService::read
     * @depends testCreate
     */
    public function testRead($cliente)
    {
        $result = $this->object->read($cliente->Id);
        $this->assertNotNull($result->getModel());
        $this->assertInstanceOf("Cliente", $result->getModel());
        $this->assertEquals($cliente->Id, $result->getModel()->getId());
        
        return self::$cliente = $result->getModel();
    }

    /**
     * @covers Nash\Client\Services\ClienteService::update
     * @param \Nash\Client\Models\Cliente $cliente
     * @depends testRead
     */
    public function testUpdate(Cliente $cliente) {
        $cliente->setNomeFantasia("Test Update!");
        $cliente->setRetencaoISS(RetencaoISS::Retem);
        $cliente->setComplemento("complemento...");
        $cliente->setInscricaoMunicipal("1234567");
        
        $result = $this->object->update($cliente);

        $this->assertEquals(Result::SUCCESS, $result->getStatus());
        $this->assertNotNull($result->getModel());
        $this->assertEquals($cliente->getId(), $result->getModel()->Id);
        
        $result = $this->object->read($cliente->getId());

        $this->assertEquals(Result::SUCCESS, $result->getStatus());
        $this->assertNotNull($result->getModel());
        $this->assertInstanceOf("Cliente", $result->getModel());
        $this->assertEquals($cliente->getId(), $result->getModel()->getId());
        $this->assertEquals("Test Update!", $result->getModel()->getNomeFantasia());
        $this->assertEquals(RetencaoISS::Retem, $result->getModel()->getRetencaoISS());
        $this->assertEquals("complemento...", $result->getModel()->getComplemento());
        $this->assertEquals("1234567", $result->getModel()->getInscricaoMunicipal());
    }
    
    /**
     * @covers Nash\Client\Services\ClienteService::delete
     * @depends testCreate
     */
    public function testDelete($cliente)
    {
        $result = $this->object->delete($cliente->Id);
        $this->assertEquals(Result::SUCCESS, $result->getStatus());
    }
    
//    private function getConta() {
//        $service = new ContaService($this->session);
//        $result = $service->getContasTipo(1, 0, TipoConta::Cliente, "Calculo:Analitico");
//        $conta = $result->getModel()->Data[0];
//        return $conta;
//    }
    
    private function getMunicipio() {
        $service = new MunicipioService($this->session);
        $result = $service->retrieve(1, 0);
        $municipio = $result->getModel()->Data[0];
        return $municipio;
    }
    
    private function getCliente() {
        $cliente = new Cliente();
        $cliente->setNomeFantasia("Nome do Cliente");
        $cliente->setRazaoSocial("Nome do Cliente");
        $cliente->setCPFCNPJ("00000000000000");
        $cliente->setLogradouro("Rua xxx do yyy");
        
        //lookups
        $cliente->setMunicipio_id($this->getMunicipio()->Id);
        //$cliente->setConta_id($this->getConta()->Id);
        
        return $cliente;
    }
}
